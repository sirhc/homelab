---
version: '3'

networks:
  front-end:
  logging:
  automation:

x-logging:
  &default-logging
  driver: loki
  options:
    loki-url: http://${LOG_HOST:-localhost}:3100/loki/api/v1/push

services:
  homer:
    container_name: homer
    image: b4bz/homer
    logging: *default-logging
    ports:
      - '8080:8080'
    volumes:
      - '${VOLUME_ROOT}/homer/assets/:/www/assets/'
    networks:
      - front-end
    restart: unless-stopped

  home-assistant:
    container_name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:stable
    logging: *default-logging
    ports:
      - '8123:8123'
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${VOLUME_ROOT}/home-assistant/config/:/config/'
    networks:
      - front-end
      - automation
    devices:
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if00-port0:/dev/zwave
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if01-port0:/dev/zigbee
    restart: unless-stopped

  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt:latest
    logging: *default-logging
    ports:
      - '8091:8091'  # web interface
    environment:
      SESSION_SECRET: ${ZWAVE_SESSION_SECRET}
      TZ: America/Los_Angeles
    volumes:
      - '${VOLUME_ROOT}/zwavejs2mqtt/store:/usr/src/app/store'
    networks:
      - automation
    devices:
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if00-port0:/dev/zwave
    restart: unless-stopped

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    logging: *default-logging
    ports:
      - '${PIHOLE_ServerIP}:53:53/tcp'
      - '${PIHOLE_ServerIP}:53:53/udp'
      - '${PIHOLE_ServerIP}:67:67/udp'
      - '8053:80/tcp'
    environment:
      TZ:
      WEBPASSWORD: '${PIHOLE_WEBPASSWORD}'
      ServerIP: '${PIHOLE_ServerIP}'
      ADMIN_EMAIL: '${PIHOLE_ADMIN_EMAIL}'
      PIHOLE_DNS_: '${PIHOLE_PIHOLE_DNS_}'
      DNSSEC: 'true'
      TEMPERATUREUNIT: 'f'
      # WEB_PORT: '8053'
    volumes:
      - '${VOLUME_ROOT}/Pi-hole/etc/:/etc/pihole/'
      - '${VOLUME_ROOT}/Pi-hole/dnsmasq.d/:/etc/dnsmasq.d/'
    networks:
      - front-end
    cap_add:
      - NET_ADMIN
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    logging: *default-logging
    depends_on:
      - loki
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - '${VOLUME_ROOT}/grafana/var/:/var/lib/grafana/'
    networks:
      - front-end
      - logging
    restart: unless-stopped

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    volumes:
      - '${VOLUME_ROOT}/loki/loki/:/loki/'
    networks:
      - logging
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - '${VOLUME_ROOT}/prometheus/:/prometheus/'
      - './prometheus.yml:/etc/prometheus/prometheus.yml'
    networks:
      - logging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    restart: unless-stopped

  # prometheus-moto-exporter:
  #   build:
  #     context: prometheus-moto-exporter/
  #   container_name: prom-moto
  #   image: prometheus-moto-exporter
  #   logging: *default-logging
  #   restart: unless-stopped

  # prometheus-onhub-exporter:
  #   build:
  #     context: prometheus-onhub-exporter/
  #   container_name: prom-onhub
  #   image: prometheus-onhub-exporter
  #   logging: *default-logging
  #   environment:
  #     ONHUB_HOST: 'onhub.here'
  #   restart: unless-stopped

  prometheus-solaredge-exporter:
    container_name: prom-solaredge
    image: chrisjohnson00/solaredge-prometheus-exporter
    logging: *default-logging
    environment:
      API_KEY: '${SOLAREDGE_API_KEY}'
      TZ:
    networks:
      - logging
    restart: unless-stopped

  prometheus-openweather-exporter:
    container_name: prom-openweather
    image: billykwooten/openweather-exporter
    logging: *default-logging
    environment:
      OW_CITY: '${OPENWEATHER_CITY}'
      OW_APIKEY: '${OPENWEATHER_APIKEY}'
    networks:
      - logging
    restart: unless-stopped

  mealie:
    container_name: mealie
    image: hkotel/mealie:latest
    logging: *default-logging
    ports:
      - '9925:80'
    environment:
      # https://hay-kot.github.io/mealie/documentation/getting-started/install/#env-variables
      PUID: 1024
      PGID: 100
      TZ: America/Los_Angeles
    volumes:
      - ${VOLUME_ROOT}/mealie/data/:/app/data/
    networks:
      - front-end
    restart: unless-stopped
