---
version: '3'

networks:
  front-end:
  logging:
  automation:

volumes:
  grafana:
  home-assistant_config:
  homer_assets:
  jellyfin_cache:
  jellyfin_config:
  lidarr_config:
  loki:
  mealie_data:
  nzbget_config:
  pihole_dnsmasq:
  pihole_etc:
  prometheus:
  radarr_config:
  readarr_config:
  sonarr_config:
  zwavejs2mqtt_store:

x-logging: &default-logging
  driver: loki
  options:
    loki-url: http://${LOG_HOST:-localhost}:3100/loki/api/v1/push

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    logging: *default-logging
    depends_on:
      - loki
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - front-end
    restart: unless-stopped

  whoami:
    container_name: whoami
    image: traefik/whoami:latest
    logging: *default-logging
    depends_on:
      - loki
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${DOMAIN}`)
      traefik.http.routers.whoami.entrypoints: web
      traefik.http.middlewares.cors_headers.headers.accesscontrolallowheaders: authorization
      traefik.http.middlewares.cors_headers.headers.accesscontrolallowmethods: GET,OPTIONS
      traefik.http.middlewares.cors_headers.headers.accesscontrolalloworiginlist: http://${DOMAIN}
      traefik.http.middlewares.cors_headers.headers.accesscontrolmaxage: 100
      traefik.http.middlewares.cors_headers.headers.addvaryheader: true
    networks:
      - front-end
    restart: unless-stopped

  homer:
    container_name: homer
    image: b4bz/homer:latest
    logging: *default-logging
    depends_on:
      - loki
    labels:
      traefik.enable: true
      traefik.http.routers.homer.rule: Host(`${DOMAIN}`)
      traefik.http.routers.homer.entrypoints: web
      traefik.http.services.homer.loadbalancer.server.port: 8080
    environment:
      INIT_ASSETS: 0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - homer_assets:/www/assets
    networks:
      - front-end
    restart: unless-stopped

  home-assistant:
    container_name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:latest
    logging: *default-logging
    depends_on:
      - loki
    labels:
      traefik.enable: true
      traefik.docker.network: homelab_front-end
      traefik.http.routers.home-assistant.rule: Host(`home.${DOMAIN}`)
      traefik.http.routers.home-assistant.entrypoints: web
      traefik.http.services.home-assistant.loadbalancer.server.port: 8123
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - home-assistant_config:/config
    networks:
      - front-end
      - automation
    devices:
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if00-port0:/dev/zwave
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if01-port0:/dev/zigbee
    restart: unless-stopped

  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt:latest
    logging: *default-logging
    depends_on:
      - loki
    environment:
      SESSION_SECRET: ${ZWAVE_SESSION_SECRET}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - zwavejs2mqtt_store:/usr/src/app/store
    networks:
      - front-end
      - automation
    devices:
      - /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_5150176C-if00-port0:/dev/zwave
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.zwave.rule: Host(`zwave.${DOMAIN}`)
      traefik.http.routers.zwave.entrypoints: web
      traefik.http.services.zwave.loadbalancer.server.port: 8091

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    logging: *default-logging
    depends_on:
      - loki
    ports:
      - '${PIHOLE_ServerIP}:53:53/tcp'
      - '${PIHOLE_ServerIP}:53:53/udp'
      - '${PIHOLE_ServerIP}:67:67/udp'
      - '8053:80/tcp'
    environment:
      WEBPASSWORD: '${PIHOLE_WEBPASSWORD}'
      ServerIP: '${PIHOLE_ServerIP}'
      ADMIN_EMAIL: '${PIHOLE_ADMIN_EMAIL}'
      PIHOLE_DNS_: '${PIHOLE_PIHOLE_DNS_}'
      DNSSEC: 'true'
      TEMPERATUREUNIT: 'f'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - pihole_dnsmasq:/etc/dnsmasq.d
      - pihole_etc:/etc/pihole
    networks:
      - front-end
    cap_add:
      - NET_ADMIN
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    logging: *default-logging
    depends_on:
      - loki
      - prometheus
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - grafana:/var/lib/grafana
    networks:
      - front-end
      - logging
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.docker.network: homelab_front-end
      traefik.http.routers.grafana.rule: Host(`grafana.${DOMAIN}`)
      traefik.http.routers.grafana.entrypoints: web
      traefik.http.services.grafana.loadbalancer.server.port: 3000

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - loki:/loki
    networks:
      - logging
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.loki.rule: Host(`loki.${DOMAIN}`)
      traefik.http.routers.loki.entrypoints: web
      traefik.http.services.loki.loadbalancer.server.port: 3100

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus:/prometheus
    networks:
      - logging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.prom.rule: Host(`prom.${DOMAIN}`)
      traefik.http.routers.prom.entrypoints: web
      traefik.http.services.prom.loadbalancer.server.port: 9090

  # prometheus-moto-exporter:
  #   build:
  #     context: prometheus-moto-exporter/
  #   container_name: prom-moto
  #   image: prometheus-moto-exporter
  #   logging: *default-logging
  #   restart: unless-stopped

  # prometheus-onhub-exporter:
  #   build:
  #     context: prometheus-onhub-exporter/
  #   container_name: prom-onhub
  #   image: prometheus-onhub-exporter
  #   logging: *default-logging
  #   environment:
  #     ONHUB_HOST: 'onhub.here'
  #   restart: unless-stopped

  prometheus-solaredge-exporter:
    container_name: prom-solaredge
    image: chrisjohnson00/solaredge-prometheus-exporter:latest
    logging: *default-logging
    depends_on:
      - loki
    environment:
      API_KEY: '${SOLAREDGE_API_KEY}'
    networks:
      - logging
    restart: unless-stopped

  prometheus-openweather-exporter:
    container_name: prom-openweather
    image: billykwooten/openweather-exporter:latest
    logging: *default-logging
    depends_on:
      - loki
    environment:
      OW_CITY: '${OPENWEATHER_CITY}'
      OW_APIKEY: '${OPENWEATHER_APIKEY}'
    networks:
      - logging
    restart: unless-stopped

  mealie:
    container_name: mealie
    image: hkotel/mealie:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mealie_data:/app/data
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.mealie.rule: Host(`mealie.${DOMAIN}`)
      traefik.http.routers.mealie.entrypoints: web
      traefik.http.routers.mealie.middlewares: cors_headers
      traefik.http.services.mealie.loadbalancer.server.port: 80

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media:/media
      - jellyfin_cache:/cache
      - jellyfin_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.${DOMAIN}`)
      traefik.http.routers.jellyfin.entrypoints: web
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media/:/data/
      - radarr_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.rule: Host(`radarr.${DOMAIN}`)
      traefik.http.routers.radarr.entrypoints: web
      traefik.http.routers.radarr.middlewares: cors_headers
      traefik.http.services.radarr.loadbalancer.server.port: 7878

  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media/:/data/
      - sonarr_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`sonarr.${DOMAIN}`)
      traefik.http.routers.sonarr.entrypoints: web
      traefik.http.routers.sonarr.middlewares: cors_headers
      traefik.http.services.sonarr.loadbalancer.server.port: 8989

  lidarr:
    container_name: lidarr
    image: lscr.io/linuxserver/lidarr:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media/:/data/
      - lidarr_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.lidarr.rule: Host(`lidarr.${DOMAIN}`)
      traefik.http.routers.lidarr.entrypoints: web
      traefik.http.routers.lidarr.middlewares: cors_headers
      traefik.http.services.lidarr.loadbalancer.server.port: 8686

  readarr:
    container_name: readarr
    image: lscr.io/linuxserver/readarr:develop
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media/:/data/
      - readarr_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.readarr.rule: Host(`readarr.${DOMAIN}`)
      traefik.http.routers.readarr.entrypoints: web
      traefik.http.routers.readarr.middlewares: cors_headers
      traefik.http.services.readarr.loadbalancer.server.port: 8787

  nzbget:
    container_name: nzbget
    image: lscr.io/linuxserver/nzbget:latest
    logging: *default-logging
    depends_on:
      - loki
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /media/:/data/
      - nzbget_config:/config
    networks:
      - front-end
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.nzbget.rule: Host(`nzbget.${DOMAIN}`)
      traefik.http.routers.nzbget.entrypoints: web
      traefik.http.routers.nzbget.middlewares: cors_headers
      traefik.http.services.nzbget.loadbalancer.server.port: 6789
